)
sum(table(x)/N*c(mean(y[x == "1"]), mean(y[x == "2"]), mean(y[x == "3"])))
table(x)
sum(table(x)/n*c(mean(y[x == "1"]), mean(y[x == "2"]), mean(y[x == "3"])))
mean(y) + model_tmp$coefficients%*% (rep(0.33333,times = 3) - table(x)/n)
mean(y)
sum(table(x)/n*c(mean(y[x == "1"]), mean(y[x == "2"]), mean(y[x == "3"])))
sum(table(X)/N*c(mean(y[x == "1"]), mean(y[x == "2"]), mean(y[x == "3"])))
mean(y) + model_tmp$coefficients%*% (rep(0.33333,times = 3) - table(x)/n)
lm(y~x-1)
beta
beta = c(2,0.5,1)
for(i in 1:N) {
if(X[i] == "1") {
Y[i] = rnorm(n = 1,mean = beta[1])
}
if(X[i] == "2") {
Y[i] = rnorm(n = 1,mean = beta[2])
}
if(X[i] == "3") {
Y[i] = rnorm(n = 1,mean = beta[3])
}
}
ind = sample(N, size = n)
x = X[ind]
y = Y[ind]
model_tmp = lm(y~x-1)
mean(y) + model_tmp$coefficients%*% (rep(0.33333,times = 3) - table(x)/n)
1/n*(N-n)/(N-1)*var(predict(model_tmp)-y)
sum(table(X)/N*c(mean(y[x == "1"]), mean(y[x == "2"]), mean(y[x == "3"])))
mean(y[x == "1"])
lm(y~x-1)
set.seed(123)
N = 10000
n = 400
X = sample(x = c("1", "2", "3"), size = N, replace = T)
Y = numeric(N)
real_bar_Y = mean(Y)
beta = c(2,0.5,1)
for(i in 1:N) {
if(X[i] == "1") {
Y[i] = rnorm(n = 1,mean = beta[1])
}
if(X[i] == "2") {
Y[i] = rnorm(n = 1,mean = beta[2])
}
if(X[i] == "3") {
Y[i] = rnorm(n = 1,mean = beta[3])
}
}
n_simula = 1000
n_simul = 1000
est_reg = numeric(length = n_simul)
var_reg = numeric(length = n_simul)
est_post = numeric(length = n_simul)
var_post = numeric(length = n_simul)
c(var(y[x == "1"]),  var(y[x == "2"]), var(y[x == "3"]))
real_prob = c(0.2,0.5,0.3)
N_h = table(X)
set.seed(123)
N = 10000
n = 400
real_prob = c(0.2,0.5,0.3)
X = sample(x = c("1", "2", "3"), size = N, replace = T, prob = real_prob)
N_h = table(X)
set.seed(123)
N = 10000
n = 400
real_prob = c(0.2,0.5,0.3)
X = sample(x = c("1", "2", "3"), size = N, replace = T, prob = real_prob)
N_h = table(X)
Y = numeric(N)
real_bar_Y = mean(Y)
beta = c(2,0.5,1)
for(i in 1:N) {
if(X[i] == "1") {
Y[i] = rnorm(n = 1,mean = beta[1])
}
if(X[i] == "2") {
Y[i] = rnorm(n = 1,mean = beta[2])
}
if(X[i] == "3") {
Y[i] = rnorm(n = 1,mean = beta[3])
}
}
N_h
table(x)
(real_prob)^2*(N_h - table(x))/N_h
(real_prob)^2*(N_h - table(x))/(N_h*table(x))*c(var(y[x == "1"]),  var(y[x == "2"]), var(y[x == "3"]))
sum((real_prob)^2*(N_h - table(x))/(N_h*table(x))*c(var(y[x == "1"]),  var(y[x == "2"]), var(y[x == "3"])))
1/n*(N-n)/(N-1)*var(predict(model_tmp)-y)
set.seed(123)
N = 10000
n = 400
real_prob = c(0.2,0.5,0.3)
X = sample(x = c("1", "2", "3"), size = N, replace = T, prob = real_prob)
N_h = table(X)
Y = numeric(N)
real_bar_Y = mean(Y)
beta = c(2,0.5,1)
for(i in 1:N) {
if(X[i] == "1") {
Y[i] = rnorm(n = 1,mean = beta[1])
}
if(X[i] == "2") {
Y[i] = rnorm(n = 1,mean = beta[2])
}
if(X[i] == "3") {
Y[i] = rnorm(n = 1,mean = beta[3])
}
}
n_simul = 1000
est_reg = numeric(length = n_simul)
var_reg = numeric(length = n_simul)
est_post = numeric(length = n_simul)
var_post = numeric(length = n_simul)
for(i in 1:n_simul) {
ind = sample(N, size = n)
x = X[ind]
y = Y[ind]
model_tmp = lm(y~x-1)
est_reg[i] = mean(y) + model_tmp$coefficients%*% (real_prob - table(x)/n)
var_reg[i] = 1/n*(N-n)/(N-1)*var(predict(model_tmp)-y)
est_post[i] =  sum(real_prob*c(mean(y[x == "1"]), mean(y[x == "2"]), mean(y[x == "3"])))
var_post[i] = sum((real_prob)^2*(N_h - table(x))/(N_h*table(x))*c(var(y[x == "1"]),  var(y[x == "2"]), var(y[x == "3"])))
}
plot(est_reg)
mean(est_reg)
mean(est_post)
est_reg
est_post
mean(var_post)
mean(var_reg)
plot(table(sim_net1[,2])/nsim)
set.seed(123)
nsim = 10000
sim_net1 <- simulate(network(6,directed = F,loops = F) ~ edges + triangle,
coef=c(0,0.46),output = "stats",nsim = nsim)
plot(table(sim_net1[,2])/nsim)
set.seed(12)
nsim = 10000
sim_net1 <- simulate(network(6,directed = F,loops = F) ~ edges + triangle,
coef=c(0,0.46),output = "stats",nsim = nsim)
plot(table(sim_net1[,2])/nsim)
nsim = 30000
set.seed(12)
nsim = 30000
sim_net1 <- simulate(network(6,directed = F,loops = F) ~ edges + triangle,
coef=c(0,0.46),output = "stats",nsim = nsim)
plot(table(sim_net1[,2])/nsim)
set.seed(1)
nsim = 30000
sim_net1 <- simulate(network(6,directed = F,loops = F) ~ edges + triangle,
coef=c(0,0.46),output = "stats",nsim = nsim)
plot(table(sim_net1[,2])/nsim)
table(sim_net1[,2])/nsim[1]
(table(sim_net1[,2])/nsim)[1]
(table(sim_net1[,2])/nsim)[1]*exp(1:5)
(table(sim_net1[,2])/nsim)[1]*exp(1:5*0.46)
(table(sim_net1[,2])/nsim)[1]*exp(1:5*0.46)
sim_net1 <- simulate(network(6,directed = F,loops = F) ~ edges + triangle,
coef=c(0,0.46),output = "stats",nsim = nsim)
(table(sim_net1[,2])/nsim)[1]
(table(sim_net1[,2])/nsim)[1]*exp(1:5*0.46)
c((table(sim_net1[,2])/nsim)[1], (table(sim_net1[,2])/nsim)[1]*exp(1:5*0.46))
plot(c((table(sim_net1[,2])/nsim)[1], (table(sim_net1[,2])/nsim)[1]*exp(1:5*0.46)))
plot(table(sim_net1[,2])/nsim)
sim_net1 <- simulate(network(6,directed = F,loops = F) ~ edges + triangle,
coef=c(0,0.5),output = "stats",nsim = nsim)
plot(c((table(sim_net1[,2])/nsim)[1], (table(sim_net1[,2])/nsim)[1]*exp(1:5*0.5)))
plot(table(sim_net1[,2])/nsim)
plot(c((table(sim_net1[,2])/nsim)[1], (table(sim_net1[,2])/nsim)[1]*exp(1:20*0.5)))
sim_net1 <- simulate(network(6,directed = F,loops = F) ~ edges + triangle,
coef=c(0,0.2),output = "stats",nsim = nsim)
plot(c((table(sim_net1[,2])/nsim)[1], (table(sim_net1[,2])/nsim)[1]*exp(1:20*0.2)))
plot(table(sim_net1[,2])/nsim)
sim_net1
plot(sim_net1[,2])
sim_net1 <- simulate(network(6,directed = F,loops = F) ~ edges + esp(1),
coef=c(0,0.2),output = "stats",nsim = nsim)
plot(sim_net1[,2])
plot(c((table(sim_net1[,2])/nsim)[1], (table(sim_net1[,2])/nsim)[1]*exp(1:8*0.2)))
plot(table(sim_net1[,2])/nsim)
exp(1:8*0.2)
exp(1:8*0.5)
round(exp(1:8*0.5), 3)
library(networkly)
set.seed(243)
plot.network(flomarriage,label=flomarriage %v% 'vertex.names', vertex.cex=log(flomarriage %v% "wealth"),vertex.sides=3+apply(as.matrix(flomarriage),2,sum),
vertex.col=2)
data(florentine)
set.seed(243)
plot.network(flomarriage,label=flomarriage %v% 'vertex.names', vertex.cex=log(flomarriage %v% "wealth"),vertex.sides=3+apply(as.matrix(flomarriage),2,sum),
vertex.col=2)
set.seed(243)
plot.network(flomarriage,label=flomarriage %v% 'vertex.names', vertex.cex=log(flomarriage %v% "wealth"),vertex.sides=3+apply(as.matrix(flomarriage),2,sum),
vertex.col=2)
as.matrix(flomarriage)
xtable(as.matrix(flomarriage)[1:6,1:6])
set.seed(2312)
plot.igraph(graph_from_literal( A--B, B--C,C--A),vertex.size=40,
vertex.label=c("i","j","k"),vertex.label.cex=2,vertex.label.family="sans",vertex.label.color="black")
#3.3----
y=as.matrix(flomarriage)
like_logis= function(eta,y) {
l=0
for(i in 1: nrow(y)) {
for(j in i:  nrow(y)){
y_pl=y
y_pl[i,j]=y_pl[j,i]=1
y_mi=y
y_mi[i,j]=y_mi[j,i]=0
delta= as.numeric(summary.statistics(y_pl~edges)/2-summary.statistics(y_mi~edges)/2)
l=l+y[i,j]*eta*delta-log(1+exp(eta*delta))
}
}
return(l)
}
like_approx_min_like_eta_o= function(eta,eta_0,y,m) {
g=as.numeric(simulate(network(16,directed = F)~edges,coef = eta_0,statsonly = T,nsim = m))
l_l=c()
if(length(eta)>1) {
for(i in 1: length(eta)) {
l_l[i]=(eta[i]-eta_0)*as.numeric(summary.statistics(y~edges))/2 -log(1/m* sum(exp((eta[i]-eta_0)*g)))
}
} else {
l_l=(eta-eta_0)*as.numeric(summary.statistics(y~edges))/2 -log(1/m* sum(exp((eta-eta_0)*g)))
}
erg=list(l_l,g)
return(erg)
}
eta_t= function(eta,y,g,mean,g_obs,gamma) {
return(eta+t(solve(var(g))%*%(gamma*(g_obs -mean))))
}
eta_0=-1.5
plot(x=seq(-8,2,length.out = 80),y=like_logis(eta = seq(-8,2,length.out = 80),y)-like_logis(eta = eta_0,y),type="l",xlab = expression(eta),
ylab = expression(paste("l(",eta,"|y)-","l(",eta[0],"|y)")),col="black",ylim=c(-150,50),cex.axis=1.2,cex.lab=1.2,lwd=2)
like_logis
#3.4 ------
#
flomodel.02 <- ergm(flobusiness~edges+kstar(2:3)+triangle)
summary(flomodel.02)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(igraph)
set.seed(123)
g <- erdos.renyi.game(50, 1/2)
pdf("example_er_0_5.pdf")
plot(g)
dev.off()
g <- erdos.renyi.game(50, 1/10)
pdf("example_er_0_1.pdf")
plot(g)
dev.off()
set.seed(13)
n_actors = 50
x = abs(rnorm(n = n_actors))
pdf("density_x.pdf")
plot(density(x, from = 0), main = "", xlab = "x Values")
dev.off()
x_cov = outer(x,x,function(x,y) { abs(x-y)
})
cov_tmp = graph_from_adjacency_matrix(x_cov, mode = "undirected", weighted = T)
pdf("covs.pdf")
plot(cov_tmp, edge.width = E(cov_tmp)$weight*0.4,vertex.size = x*5)
dev.off()
expit = function(x) {exp(x)/(1+exp(x))}
network_mat = matrix(rbinom(n = length(x_cov), size = 1, prob = expit(-2- x_cov)),nrow = n_actors)
diag(network_mat) = NA
network_tmp = graph_from_adjacency_matrix(network_mat, mode = "undirected")
pdf("net_pos.pdf")
plot(network_tmp, vertex.size = x*5)
dev.off()
network_mat = matrix(rbinom(n = length(x_cov), size = 1, prob = expit(-6+ 4*x_cov)),nrow = n_actors)
diag(network_mat) = NA
network_tmp = graph_from_adjacency_matrix(network_mat, mode = "undirected")
pdf("net_neg.pdf")
plot(network_tmp, vertex.size = x*5)
dev.off()
library(ergm)
set.seed(2)
sim_net <- simulate(network(50,directed = F,loops = F) ~ edges, coef=c(-2))
ig2 <- intergraph::asIgraph(sim_net)
plot(ig2)
pdf("degreedist_er.pdf")
sum_net <- summary(sim_net ~ degree(c(0:10)))
plot(y = sum_net, x = 0:10, xlab = "Degree", ylab = "Absolute Frequency", type = "b")
dev.off()
n_actors = 10000
pi = 0.001
sim_net <- erdos.renyi.game(n_actors, pi)
degree_dist_tmp = degree_distribution(sim_net)
x = 0:(length(degree_dist_tmp)-1)
pdf("degreedist_er_exact.pdf")
plot(x = x,
degree_dist_tmp*n_actors, xlab = "Degree",
ylab = "Absolute Frequency", type = "b")
legend(x = 15, y = 1000,legend = c("Observed", "Expected"),
col = c("black", "red"),lty = c(1,1))
dev.off()
pdf("degreedist_er_approx.pdf")
plot(x = x,
degree_dist_tmp*n_actors, xlab = "Degree",
ylab = "Absolute Frequency", type = "b")
lines(x =x,y =  dbinom(x = x, size = n_actors-1, prob = pi)*n_actors, col = "red")
legend(x = 15, y = 1000,legend = c("Observed", "Expected"),
col = c("black", "red"),lty = c(1,1))
dev.off()
set.seed(123)
sim_net <- simulate(network(50,directed = F,loops = F) ~ edges + degree(2), coef=c(-2, 2))
ig2 <- intergraph::asIgraph(sim_net)
pdf("net_degree_2.pdf")
plot(ig2)
dev.off()
pdf("degreedist_2.pdf")
sum_net <- summary(sim_net ~ degree(c(0:10)))
plot(y = sum_net, x = 0:10, xlab = "Degree", ylab = "Absolute Frequency", type = "b")
dev.off()
set.seed(2)
sim_net <- simulate(network(50,directed = F,loops = F) ~ edges + degree(c(0:10)), coef=c(-1, seq(11,-1,length.out = 11)))
ig2 <- intergraph::asIgraph(sim_net)
pdf("net_degree_25.pdf")
plot(ig2)
dev.off()
pdf("degreedist_25.pdf")
sum_net <- summary(sim_net ~ degree(c(0:10)))
plot(y = sum_net, x = 0:10, xlab = "Degree", ylab = "Absolute Frequency", type = "b")
dev.off()
set.seed(123)
sim_net <- simulate(network(50,directed = F,loops = F) ~ edges + esp(c(2)), coef=c(-3, 2.5))
ig2 <- intergraph::asIgraph(sim_net)
pdf("net_esp_25.pdf")
plot(ig2)
dev.off()
pdf("espdist_25.pdf")
sum_net <- summary(sim_net ~ esp(c(0:10)))
plot(x = 0:10, y = sum_net, xlab = "Edgewise Shared Partners", ylab = "Absolute Frequency", type = "b")
dev.off()
set.seed(123)
sim_net <- simulate(network(50,directed = F,loops = F) ~ edges + dsp(c(2)), coef=c(-3, 2.5))
ig2 <- intergraph::asIgraph(sim_net)
pdf("net_esp_25.pdf")
plot(ig2)
dev.off()
pdf("espdist_25.pdf")
sum_net <- summary(sim_net ~ dsp(c(0:10)))
plot(x = 0:10, y = sum_net, xlab = "Edgewise Shared Partners", ylab = "Absolute Frequency", type = "b")
dev.off()
library(ergm)
values_triangle = seq(from = -1,to =1,length.out = 300)
exp_triangle = numeric(300)
exp_edges = numeric(300)
i = 1
for(i in 1:length(values_triangle)) {
cat(i,"\n")
sim_net <- simulate(network(50,directed = F,loops = F) ~ edges + kstar(c(2)),
coef=c(-3,values_triangle[i]),nsim = 1000,output = "stats")
tmp = colMeans(sim_net)
exp_edges[i] = tmp[1]
exp_triangle[i] = tmp[2]
}
pdf("degeneracy_example.pdf",width = 12)
par(mfrow = c(1,2))
plot(values_triangle,exp_triangle, type = "l", xlab = expression(theta["2-star"]),
ylab = "Expected 2-star statistics")
plot(values_triangle,exp_edges, type = "l", xlab = expression(theta["2-star"]),
ylab = "Expected number of edges")
dev.off()
set.seed(123)
sim_net1 <- simulate(network(50,directed = F,loops = F) ~ edges + kstar(c(2)),
coef=c(-3,0.05))
ig1 <- intergraph::asIgraph(sim_net1)
sim_net2 <- simulate(network(50,directed = F,loops = F) ~ edges + kstar(c(2)),
coef=c(-3,0.1))
ig2 <- intergraph::asIgraph(sim_net2)
pdf("degeneracy_picture.pdf",width = 12)
par(mfrow = c(1,2))
plot(ig1, main = expression(paste(theta["2-star"],"= 0.05")))
plot(ig2, main = expression(paste(theta["2-star"],"= 0.1")))
dev.off()
pdf("net_esp_25.pdf")
plot(ig2)
dev.off()
set.seed(1)
nsim = 30000
sim_net1 <- simulate(network(6,directed = F,loops = F) ~ edges + esp(1),
coef=c(0,0.2),output = "stats",nsim = nsim)
plot(c((table(sim_net1[,2])/nsim)[1], (table(sim_net1[,2])/nsim)[1]*exp(1:8*0.2)))
plot(table(sim_net1[,2])/nsim)
round(table(sim_net1[,2])/nsim, digits = 3)
data(florentine)
pdf("netzwerk_flomarriage.pdf",width =  9.32,height= 7.72)
set.seed(243)
plot.network(flomarriage,label=flomarriage %v% 'vertex.names', vertex.cex=log(flomarriage %v% "wealth"),vertex.sides=3+apply(as.matrix(flomarriage),2,sum),
vertex.col=2)
dev.off()
data(florentine)
pdf("netzwerk_flomarriage.pdf",width =  9.32,height= 7.72)
set.seed(243)
plot.network(flomarriage,label=flomarriage %v% 'vertex.names', vertex.cex=log(flomarriage %v% "wealth"),vertex.sides=3+apply(as.matrix(flomarriage),2,sum),
vertex.col=2)
dev.off()
flomodel.02 <- ergm(flobusiness~edges+kstar(2:3)+triangle)
summary(flomodel.02)
flomodel.02 <- ergm(flobusiness~edges+degree(1:3)+triangle)
flomodel.02 <- ergm(flobusiness~edges+degree(2:3)+triangle)
flomodel.02 <- ergm(flobusiness~edges+gwdegree(log(2), fixed = T)+triangle)
flomodel.02 <- ergm(flobusiness~edges+gwdegree(log(2), fixed = T))
flomodel.02 <- ergm(flobusiness~edges+kstar(2:3)+triangle + absdiff(log(flomarriage %v% "wealth")))
wealth" = log(flomarriage %v% "wealth")
dev.off()
flomarriage %v% "log_wealth" = log(flomarriage %v% "wealth")
flomodel.02 <- ergm(flobusiness~edges+kstar(2:3)+triangle + absdiff("log_wealth"))
flobusiness
flomodel.02 <- ergm(flomarriage~edges+kstar(2:3)+
triangle + absdiff("log_wealth"))
flomodel.02 <- ergm(flomarriage~edges+degree(2:3)+
triangle + absdiff("log_wealth"))
flomodel.02 <- ergm(flomarriage~edges+degree(1:5)+
triangle + absdiff("log_wealth"))
summary(flomodel.02)
flomodel.02 <- ergm(flomarriage~edges+degree(1:3)+
triangle + absdiff("log_wealth"))
flomodel.02 <- ergm(flomarriage~edges+degree(2:3)+
triangle + absdiff("log_wealth"))
summary(flomodel.02)
flomodel.02 <- ergm(flomarriage~edges+gwdegree(log(2), fixed = T)+
triangle + absdiff("log_wealth"))
summary(flomodel.02)
flomodel.02 <- ergm(flomarriage~edges+
triangle + absdiff("log_wealth"))
summary(flomodel.02)
flomodel.02 <- ergm(flomarriage~edges+ absdiff("log_wealth"))
summary(flomodel.02)
flomodel.02 <- ergm(flomarriage~edges+ triangle)
summary(flomodel.02)
plot(flomarriage)
data(faux.desert.high)
faux.desert.high
plot(faux.desert.high)
flomodel.02 <- ergm(faux.desert.high~edges+ triangle)
flomodel.02 <- ergm(faux.desert.high~edges+ gwdegree(log(2), fixed = T))
flomodel.02 <- ergm(faux.desert.high~edges+ gwidegree(log(2), fixed = T))
summary(flomodel.02)
as.matrix(faux.desert.high)
friendship_network = as.matrix(faux.desert.high)
library(sna)
symmetrize(friendship_network, rule="weak")
friendship_network = symmetrize(friendship_network, rule="weak")
friendship_network
network(friendship_network)
friendship_network = network(friendship_network)
plot(friendship_network)
library(sna)
friendship_network = as.matrix(faux.desert.high)
friendship_network = symmetrize(friendship_network, rule="strong")
friendship_network = network(friendship_network, directed = T)
plot(friendship_network)
friendship_network = symmetrize(friendship_network, rule="weak")
friendship_network = network(friendship_network, directed = T)
friendship_network = network(friendship_network, directed = F)
faux.desert.high
faux.desert.high %v% "grade"
friendship_network %v% "grade" = faux.desert.high %v% "grade"
data(faux.desert.high)
library(sna)
friendship_network = as.matrix(faux.desert.high)
friendship_network = symmetrize(friendship_network, rule="weak")
friendship_network = network(friendship_network, directed = F)
friendship_network %v% "grade" = faux.desert.high %v% "grade"
friendship_network %v% "race" = faux.desert.high %v% "race"
friendship_network %v% "sex" = faux.desert.high %v% "sex"
friendship_network %v% "vertex.names " = faux.desert.high %v% "vertex.names "
data(faux.desert.high)
library(sna)
friendship_network = as.matrix(faux.desert.high)
friendship_network = symmetrize(friendship_network, rule="weak")
friendship_network = network(friendship_network, directed = F)
friendship_network %v% "grade" = faux.desert.high %v% "grade"
friendship_network %v% "race" = faux.desert.high %v% "race"
friendship_network %v% "sex" = faux.desert.high %v% "sex"
friendship_network %v% "vertex.names " = faux.desert.high %v% "vertex.names"
friendship_network
data(faux.desert.high)
library(sna)
friendship_network = as.matrix(faux.desert.high)
friendship_network = symmetrize(friendship_network, rule="weak")
friendship_network = network(friendship_network, directed = F)
friendship_network %v% "grade" = faux.desert.high %v% "grade"
friendship_network %v% "race" = faux.desert.high %v% "race"
friendship_network %v% "sex" = faux.desert.high %v% "sex"
flomodel.02 <- ergm(friendship_network~edges+ gwdegree(log(2), fixed = T))
flomodel.02 <- ergm(friendship_network~edges+ absdiff("grade") + absdiff("race")+
gwdegree(log(2), fixed = T) + gwesp(log(2), fixed = T))
friendship_network %v% "grade"
friendship_network %v% "race"
friendship_network %v% "sex"
flomodel.02 <- ergm(friendship_network~edges+ absdiff("grade") + nodematch("race")+
gwdegree(log(2), fixed = T) + gwesp(log(2), fixed = T))
data(faux.desert.high)
library(sna)
friendship_network = as.matrix(faux.desert.high)
friendship_network = symmetrize(friendship_network, rule="weak")
friendship_network = network(friendship_network, directed = F)
friendship_network %v% "grade" = faux.desert.high %v% "grade"
friendship_network %v% "race" = faux.desert.high %v% "race"
friendship_network %v% "sex" = faux.desert.high %v% "sex"
flomodel.02 <- ergm(friendship_network~edges+ absdiff("grade") + nodematch("race"), fixed = T))
flomodel.02 <- ergm(friendship_network~edges+ absdiff("grade") + nodematch("race"), fixed = T)
summary(flomodel.02)
flomodel.02 <- ergm(friendship_network~edges+ nodematch("grade") + nodematch("race"), fixed = T)
summary(flomodel.02)
flomodel.02 <- ergm(friendship_network~edges+ triangles + nodematch("grade") + nodematch("race"), fixed = T)
